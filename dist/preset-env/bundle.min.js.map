{"version":3,"file":"bundle.min.js","sources":["../../src/ODataMockGenerator.js"],"sourcesContent":["//! Copyright (c) 2021 Jacek Woźniczak\r\n\r\n//! Permission is hereby granted, free of charge, to any person obtaining a copy\r\n//! of this software and associated documentation files (the \"Software\"), to deal\r\n//! in the Software without restriction, including without limitation the rights\r\n//! to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n//! copies of the Software, and to permit persons to whom the Software is\r\n//! furnished to do so, subject to the following conditions:\r\n\r\n//! The above copyright notice and this permission notice shall be included in all\r\n//! copies or substantial portions of the Software.\r\n\r\n//! THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n//! IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n//! FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n//! AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n//! LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n//! OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n//! SOFTWARE.\r\n\r\n//! This file has been modified by Q-Prod Jacek Woźniczak to add additional features.\r\n//! The original version is https://github.com/SAP/openui5/blob/master/src/sap.ui.core/src/sap/ui/core/util/MockServer.js\r\n//! with the license:\r\n//! OpenUI5\r\n//! (c) Copyright 2009-2021 SAP SE or an SAP affiliate company.\r\n//! Licensed under the Apache License, Version 2.0 - see https://github.com/SAP/openui5/blob/master/LICENSE.txt.\r\n\r\n/**\r\n * OData Mock Data Generator\r\n * \r\n */\r\nexport class ODataMockGenerator {\r\n  /**\r\n   * @constructor\r\n   * @param {string} metadata OData metadata XML \r\n   * @param {Object} [options={}] Generation options and rules\r\n   * @param {number} [options.numberOfEntitiesToGenerate=30] Number of entities to generate for each entity set\r\n   * @param {string} [options.mockDataRootURI=\"\"] Root URI which prefixes __metadata.uri property in the generated entities\r\n   * @param {Object} [options.rules={}] Additional rules\r\n   * @param {string[]} [options.rules.skipMockGeneration=[]] Do not generate data for the given entity sets\r\n   * @param {string[]} [options.rules.distinctValues=[]] Generate only distinct entries (based on the key properties) for the given entity sets \r\n   * @param {Object} [options.rules.predefined={}] Predefined values for the given entities, see README\r\n   * @param {Object} [options.rules.variables={}] Variables to use in \"predefined\" rules, see README\r\n   */\r\n  constructor(metadata, options = {}) {\r\n    if (!metadata) {\r\n      throw new Error(\"metadata not provided\");\r\n    }\r\n\r\n    if (!options.rules) {\r\n      options.rules = {};\r\n    }\r\n\r\n    this._predefinedValuesConfig = options.rules.predefined || {};\r\n    this._skipMockGeneration = options.rules.skipMockGeneration || [];\r\n    this._distinctValues = options.rules.distinctValues || [];\r\n    this._variables = options.rules.variables || {};\r\n    this._numberOfEntities = options.numberOfEntitiesToGenerate || 30;\r\n    this._rootUri = options.mockDataRootURI || \"\";\r\n\r\n    if (this._rootUri.substr(this._rootUri.length - 1) !== \"/\") {\r\n      this._rootUri = `${this._rootUri}/`;\r\n    }\r\n\r\n    this._prepareMetadata(metadata);\r\n  }\r\n\r\n  /**\r\n   * Generates mock data based on the metadata and options passed to the constructor \r\n   * \r\n   * @returns {Object} Generated data in form { EntitySet1: [{ ..properties.. }], EntitySet2: [{ .. properties.. }] }\r\n   */\r\n  createMockData() {\r\n    const entitySets = this._findEntitySets(this._oMetadata);\r\n    const entitySetNames = Object.keys(entitySets);\r\n\r\n    //exclude adjustments\r\n    this._skipMockGeneration.forEach((element) => {\r\n      if (entitySetNames.find((name) => {\r\n          return name === element;\r\n        })) {\r\n\r\n        delete entitySets[element];\r\n      }\r\n    });\r\n\r\n    this._findEntityTypes(this._oMetadata);\r\n    this._generateMockdata(entitySets, this._oMetadata);\r\n\r\n    return this._oMockdata;\r\n  }\r\n\r\n  _prepareMetadata(metadata) {\r\n    try {\r\n      this._oMetadata = jQuery.parseXML(metadata);\r\n    } catch (error) {\r\n      throw new Error(`Metadata parsing error: ${error}`);\r\n    }\r\n  }\r\n\r\n  _generateMockdata(mEntitySets, oMetadata) {\r\n    const oMockData = {};\r\n    const sRootUri = this._getRootUri();\r\n\r\n    jQuery.each(mEntitySets, (sEntitySetName, oEntitySet) => {\r\n      const mEntitySet = {};\r\n      mEntitySet[oEntitySet.name] = oEntitySet;\r\n      oMockData[sEntitySetName] = this._generateODataMockdataForEntitySet(mEntitySet, oMetadata)[sEntitySetName];\r\n    });\r\n\r\n    // changing the values if there is a referential constraint\r\n    jQuery.each(mEntitySets, (sEntitySetName, oEntitySet) => {\r\n      for (const navprop in oEntitySet.navprops) {\r\n        const oNavProp = oEntitySet.navprops[navprop];\r\n        const iPropRefLength = oNavProp.from.propRef.length;\r\n        for (let j = 0; j < iPropRefLength; j++) {\r\n          for (let i = 0; i < oMockData[sEntitySetName].length; i++) {\r\n            const oEntity = oMockData[sEntitySetName][i];\r\n            // copy the value from the principle to the dependant;\r\n            oMockData[oNavProp.to.entitySet][i][oNavProp.to.propRef[j]] = oEntity[oNavProp.from.propRef[j]];\r\n          }\r\n        }\r\n      }\r\n\r\n      jQuery.each(oMockData[sEntitySetName], (iIndex, oEntry) => {\r\n        // add the metadata for the entry\r\n        oEntry.__metadata = {\r\n          uri: sRootUri + sEntitySetName + \"(\" + this._createKeysString(oEntitySet, oEntry) + \")\",\r\n          type: oEntitySet.schema + \".\" + oEntitySet.type\r\n        };\r\n        // add the navigation properties\r\n        jQuery.each(oEntitySet.navprops, (sKey) => {\r\n          oEntry[sKey] = {\r\n            __deferred: {\r\n              uri: sRootUri + sEntitySetName + \"(\" + this._createKeysString(oEntitySet, oEntry) + \")/\" + sKey\r\n            }\r\n          };\r\n        });\r\n      });\r\n    });\r\n\r\n    this._oMockdata = oMockData;\r\n  }\r\n\r\n  _generateODataMockdataForEntitySet(mEntitySets, oMetadata) {\r\n    // load the entity sets (map the entity type data to the entity set)\r\n    const oMockData = {};\r\n\r\n    // here we need to analyse the EDMX and identify the entity types and complex types\r\n    const mEntityTypes = this._findEntityTypes(oMetadata);\r\n    const mComplexTypes = this._findComplexTypes(oMetadata);\r\n\r\n    jQuery.each(mEntitySets, (sEntitySetName, oEntitySet) => {\r\n      oMockData[sEntitySetName] = this._generateDataFromEntitySet(oEntitySet, mEntityTypes, mComplexTypes);\r\n    });\r\n\r\n    return oMockData;\r\n  }\r\n\r\n  _findEntityTypes(oMetadata) {\r\n    const mEntityTypes = {};\r\n    jQuery(oMetadata).find(\"EntityType\").each((iIndex, oEntityType) => {\r\n      const $EntityType = jQuery(oEntityType);\r\n\r\n      mEntityTypes[$EntityType.attr(\"Name\")] = {\r\n        \"name\": $EntityType.attr(\"Name\"),\r\n        \"properties\": [],\r\n        \"keys\": []\r\n      };\r\n\r\n      $EntityType.find(\"Property\").each((iIndex, oProperty) => {\r\n        const $Property = jQuery(oProperty);\r\n        const type = $Property.attr(\"Type\");\r\n        mEntityTypes[$EntityType.attr(\"Name\")].properties.push({\r\n          \"schema\": type.substring(0, type.lastIndexOf(\".\")),\r\n          \"type\": type.substring(type.lastIndexOf(\".\") + 1),\r\n          \"name\": $Property.attr(\"Name\"),\r\n          \"precision\": $Property.attr(\"Precision\"),\r\n          \"scale\": $Property.attr(\"Scale\")\r\n        });\r\n      });\r\n\r\n      $EntityType.find(\"PropertyRef\").each((iIndex, oKey) => {\r\n        const $Key = jQuery(oKey);\r\n        const sPropertyName = $Key.attr(\"Name\");\r\n        mEntityTypes[$EntityType.attr(\"Name\")].keys.push(sPropertyName);\r\n      });\r\n    });\r\n\r\n    return mEntityTypes;\r\n  }\r\n\r\n  _findComplexTypes(oMetadata) {\r\n    const mComplexTypes = {};\r\n    jQuery(oMetadata).find(\"ComplexType\").each((iIndex, oComplexType) => {\r\n      const $ComplexType = jQuery(oComplexType);\r\n      mComplexTypes[$ComplexType.attr(\"Name\")] = {\r\n        \"name\": $ComplexType.attr(\"Name\"),\r\n        \"properties\": []\r\n      };\r\n\r\n      $ComplexType.find(\"Property\").each((iIndex, oProperty) => {\r\n        const $Property = jQuery(oProperty);\r\n        const type = $Property.attr(\"Type\");\r\n        mComplexTypes[$ComplexType.attr(\"Name\")].properties.push({\r\n          \"schema\": type.substring(0, type.lastIndexOf(\".\")),\r\n          \"type\": type.substring(type.lastIndexOf(\".\") + 1),\r\n          \"name\": $Property.attr(\"Name\"),\r\n          \"precision\": $Property.attr(\"Precision\"),\r\n          \"scale\": $Property.attr(\"Scale\")\r\n        });\r\n      });\r\n    });\r\n\r\n    return mComplexTypes;\r\n  }\r\n\r\n  _generateDataFromEntitySet(oEntitySet, mEntityTypes, mComplexTypes) {\r\n    const oEntityType = mEntityTypes[oEntitySet.type];\r\n    let aMockedEntries = [];\r\n\r\n    for (let i = 0; i < this._numberOfEntities; i++) {\r\n      aMockedEntries.push(this._generateDataFromEntity(oEntityType, i + 1, mComplexTypes));\r\n    }\r\n\r\n    if (this._distinctValues.includes(oEntitySet.name)) {\r\n      aMockedEntries = this._removeDuplicates(aMockedEntries, oEntityType.keys);\r\n    }\r\n\r\n    return aMockedEntries;\r\n  }\r\n\r\n  _removeDuplicates(generatedData, keyFields) {\r\n    const unique = [];\r\n    const keys = \"x\".repeat(keyFields.length);\r\n    let insert = true;\r\n\r\n    generatedData.forEach((element) => {\r\n      for (let i = 0; i < unique.length; i++) {\r\n        let keyMatch = \"\";\r\n\r\n        keyFields.forEach((key) => {\r\n          if (unique[i][key] === element[key]) {\r\n            keyMatch += \"x\";\r\n          }\r\n        });\r\n\r\n        if (keyMatch === keys) {\r\n          insert = false;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (insert) {\r\n        unique.push(element);\r\n      }\r\n\r\n      insert = true;\r\n    });\r\n\r\n    return unique;\r\n  }\r\n\r\n  _generateDataFromEntity(oEntityType, iIndex, mComplexTypes) {\r\n    const oEntity = {};\r\n\r\n    if (!oEntityType) {\r\n      return oEntity;\r\n    }\r\n\r\n    for (let i = 0; i < oEntityType.properties.length; i++) {\r\n      const oProperty = oEntityType.properties[i];\r\n      oEntity[oProperty.name] = this._generatePropertyValue(oProperty, mComplexTypes, iIndex, oEntityType, oEntity);\r\n    }\r\n\r\n    return oEntity;\r\n  }\r\n\r\n  _generatePropertyValue(property, mComplexTypes, iIndexParameter, entityType, entity) {\r\n    //already created?\r\n    if (entity[property.name]) {\r\n      return entity[property.name];\r\n    }\r\n\r\n    //predefined?\r\n    if (this._predefinedValuesConfig[entityType.name] &&\r\n      this._predefinedValuesConfig[entityType.name][property.name]) {\r\n\r\n      const propertyConfig = this._predefinedValuesConfig[entityType.name][property.name];\r\n\r\n      if (Array.isArray(propertyConfig)) {\r\n        //array of values\r\n        return propertyConfig[Math.floor(Math.random() * propertyConfig.length)];\r\n      } else if (typeof propertyConfig === \"string\" && propertyConfig.indexOf(\"$ref\") !== -1) {\r\n        const variableName = propertyConfig.split(\":\")[1];\r\n\r\n        if (this._variables && this._variables[variableName]) {\r\n          const variable = this._variables[variableName];\r\n\r\n          if (Array.isArray(variable)) {\r\n            return variable[Math.floor(Math.random() * variable.length)];\r\n          } else {\r\n            return variable;\r\n          }\r\n        } else {\r\n          throw `Variable ${propertyConfig} not found`;\r\n        }\r\n      } else {\r\n        //dependent?\r\n        if (propertyConfig.reference) {\r\n          if (entity[propertyConfig.reference]) {\r\n            //already created - get its value\r\n            const referencedValue = entity[propertyConfig.reference];\r\n            //get assigned value\r\n            if (propertyConfig.values) {\r\n              for (const el of propertyConfig.values) {\r\n                if (el.key && el.key === referencedValue) {\r\n                  return el.value ? el.value : \"missing value\";\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            //not yet\r\n            //get missing property value\r\n            for (const i in entityType.properties) {\r\n              if (entityType.properties[i].name === propertyConfig.reference) {\r\n                const emptyProperty = entityType.properties[i];\r\n                entity[emptyProperty.name] = this._generatePropertyValue(emptyProperty, mComplexTypes, iIndexParameter, entityType, entity);\r\n                //and run again for current\r\n                return this._generatePropertyValue(property, mComplexTypes, iIndexParameter, entityType, entity);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    //standard way - random values\r\n    let iIndex = iIndexParameter;\r\n\r\n    if (!iIndex) {\r\n      iIndex = Math.floor(this._getPseudoRandomNumber(\"String\") * 10000) + 101;\r\n    }\r\n\r\n    switch (property.type) {\r\n      case \"String\":\r\n        return property.name + \" \" + iIndex;\r\n      case \"DateTime\": {\r\n        const date = new Date();\r\n        date.setFullYear(2000 + Math.floor(this._getPseudoRandomNumber(\"DateTime\") * 20));\r\n        date.setDate(Math.floor(this._getPseudoRandomNumber(\"DateTime\") * 30));\r\n        date.setMonth(Math.floor(this._getPseudoRandomNumber(\"DateTime\") * 12));\r\n        date.setMilliseconds(0);\r\n        return \"/Date(\" + date.getTime() + \")/\";\r\n      }\r\n      case \"Int16\":\r\n      case \"Int32\":\r\n      case \"Int64\":\r\n        return Math.floor(this._getPseudoRandomNumber(\"Int\") * 10000);\r\n      case \"Decimal\":\r\n        return Math.floor(this._getPseudoRandomNumber(\"Decimal\") * 1000000) / 100;\r\n      case \"Boolean\":\r\n        return this._getPseudoRandomNumber(\"Boolean\") < 0.5;\r\n      case \"Byte\":\r\n        return Math.floor(this._getPseudoRandomNumber(\"Byte\") * 10);\r\n      case \"Double\":\r\n        return this._getPseudoRandomNumber(\"Double\") * 10;\r\n      case \"Single\":\r\n        return this._getPseudoRandomNumber(\"Single\") * 1000000000;\r\n      case \"SByte\":\r\n        return Math.floor(this._getPseudoRandomNumber(\"SByte\") * 10);\r\n      case \"Time\":\r\n        // ODataModel expects ISO8601 duration format\r\n        return \"PT\" + Math.floor(this._getPseudoRandomNumber(\"Time\") * 23) + \"H\" + Math.floor(this._getPseudoRandomNumber(\"Time\") * 59) + \"M\" + Math.floor(this._getPseudoRandomNumber(\"Time\") * 59) + \"S\";\r\n      case \"Guid\":\r\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\r\n          const r = this._getPseudoRandomNumber(\"Guid\") * 16 | 0,\r\n            v = c === \"x\" ? r : (r & 0x3 | 0x8);\r\n          return v.toString(16);\r\n        }.bind(this));\r\n      case \"Binary\": {\r\n        const nMask = Math.floor(-2147483648 + this._getPseudoRandomNumber(\"Binary\") * 4294967295);\r\n        let sMask = \"\";\r\n        /*eslint-disable */\r\n        for (let nFlag = 0, nShifted = nMask; nFlag < 32; nFlag++, sMask += String(nShifted >>> 31), nShifted <<= 1)\r\n        ;\r\n\r\n        /*eslint-enable*/\r\n        return sMask;\r\n      }\r\n      case \"DateTimeOffset\": {\r\n        const date = new Date();\r\n        date.setFullYear(2000 + Math.floor(this._getPseudoRandomNumber(\"DateTimeOffset\") * 20));\r\n        date.setDate(Math.floor(this._getPseudoRandomNumber(\"DateTimeOffset\") * 30));\r\n        date.setMonth(Math.floor(this._getPseudoRandomNumber(\"DateTimeOffset\") * 12));\r\n        date.setMilliseconds(0);\r\n        return \"/Date(\" + date.getTime() + \"+0000)/\";\r\n      }\r\n      default:\r\n        return this._generateDataFromEntity(mComplexTypes[property.type], iIndex, mComplexTypes);\r\n    }\r\n  }\r\n\r\n  _getPseudoRandomNumber(sType) {\r\n    if (!this._iRandomSeed) {\r\n      this._iRandomSeed = {};\r\n    }\r\n    //eslint-disable-next-line\r\n    if (!this._iRandomSeed.hasOwnProperty(sType)) {\r\n      this._iRandomSeed[sType] = 0;\r\n    }\r\n    this._iRandomSeed[sType] = (this._iRandomSeed[sType] + 11) * 25214903917 % 281474976710655;\r\n    return this._iRandomSeed[sType] / 281474976710655;\r\n  }\r\n\r\n  _createKeysString(oEntitySet, oEntry) {\r\n    // creates the key string for an entity\r\n    let sKeys = \"\";\r\n    if (oEntry) {\r\n      jQuery.each(oEntitySet.keys, (iIndex, sKey) => {\r\n        if (sKeys) {\r\n          sKeys += \",\";\r\n        }\r\n        let oKeyValue = oEntry[sKey];\r\n        if (oEntitySet.keysType[sKey] === \"Edm.String\") {\r\n          oKeyValue = encodeURIComponent(\"'\" + oKeyValue + \"'\");\r\n        } else if (oEntitySet.keysType[sKey] === \"Edm.DateTime\") {\r\n          oKeyValue = this._getDateTime(oKeyValue);\r\n          oKeyValue = encodeURIComponent(oKeyValue);\r\n        } else if (oEntitySet.keysType[sKey] === \"Edm.Guid\") {\r\n          oKeyValue = \"guid'\" + oKeyValue + \"'\";\r\n        }\r\n        if (oEntitySet.keys.length === 1) {\r\n          sKeys += oKeyValue;\r\n          return sKeys;\r\n        }\r\n        sKeys += sKey + \"=\" + oKeyValue;\r\n      });\r\n    }\r\n    return sKeys;\r\n  }\r\n\r\n  _findEntitySets(oMetadata) {\r\n    const mEntitySets = {};\r\n    const oPrincipals = jQuery(oMetadata).find(\"Principal\");\r\n    const oDependents = jQuery(oMetadata).find(\"Dependent\");\r\n\r\n    jQuery(oMetadata).find(\"EntitySet\").each((iIndex, oEntitySet) => {\r\n      const $EntitySet = jQuery(oEntitySet);\r\n      // split the namespace and the name of the entity type (namespace could have dots inside)\r\n      const aEntityTypeParts = /((.*)\\.)?(.*)/.exec($EntitySet.attr(\"EntityType\"));\r\n      mEntitySets[$EntitySet.attr(\"Name\")] = {\r\n        \"name\": $EntitySet.attr(\"Name\"),\r\n        \"schema\": aEntityTypeParts[2],\r\n        \"type\": aEntityTypeParts[3],\r\n        \"keys\": [],\r\n        \"keysType\": {},\r\n        \"navprops\": {}\r\n      };\r\n    });\r\n\r\n    // helper function to find the entity set and property reference\r\n    // for the given role name\r\n    const fnResolveNavProp = function(sRole, aAssociation, aAssociationSet, bFrom) {\r\n      const sEntitySet = jQuery(aAssociationSet).find(\"End[Role='\" + sRole + \"']\").attr(\"EntitySet\");\r\n      const sMultiplicity = jQuery(aAssociation).find(\"End[Role='\" + sRole + \"']\").attr(\"Multiplicity\");\r\n\r\n      const aPropRef = [];\r\n      const aConstraint = jQuery(aAssociation).find(\"ReferentialConstraint > [Role='\" + sRole + \"']\");\r\n      if (aConstraint && aConstraint.length > 0) {\r\n        jQuery(aConstraint[0]).children(\"PropertyRef\").each((iIndex, oPropRef) => {\r\n          aPropRef.push(jQuery(oPropRef).attr(\"Name\"));\r\n        });\r\n      } else {\r\n        const oPrinDeps = (bFrom) ? oPrincipals : oDependents;\r\n        jQuery(oPrinDeps).each((iIndex, oPrinDep) => {\r\n          if (sRole === (jQuery(oPrinDep).attr(\"Role\"))) {\r\n            jQuery(oPrinDep).children(\"PropertyRef\").each((iIndex, oPropRef) => {\r\n              aPropRef.push(jQuery(oPropRef).attr(\"Name\"));\r\n            });\r\n            return false;\r\n          }\r\n        });\r\n      }\r\n\r\n      return {\r\n        \"role\": sRole,\r\n        \"entitySet\": sEntitySet,\r\n        \"propRef\": aPropRef,\r\n        \"multiplicity\": sMultiplicity\r\n      };\r\n    };\r\n\r\n    // find the keys and the navigation properties of the entity types\r\n    jQuery.each(mEntitySets, (sEntitySetName, oEntitySet) => {\r\n      // find the keys\r\n      const $EntityType = jQuery(oMetadata).find(\"EntityType[Name='\" + oEntitySet.type + \"']\");\r\n      const aKeys = jQuery($EntityType).find(\"PropertyRef\");\r\n      jQuery.each(aKeys, (iIndex, oPropRef) => {\r\n        const sKeyName = jQuery(oPropRef).attr(\"Name\");\r\n        oEntitySet.keys.push(sKeyName);\r\n        oEntitySet.keysType[sKeyName] = jQuery($EntityType).find(\"Property[Name='\" + sKeyName + \"']\").attr(\"Type\");\r\n      });\r\n      // resolve the navigation properties\r\n      const aNavProps = jQuery(oMetadata).find(\"EntityType[Name='\" + oEntitySet.type + \"'] NavigationProperty\");\r\n      jQuery.each(aNavProps, (iIndex, oNavProp) => {\r\n        const $NavProp = jQuery(oNavProp);\r\n        const aRelationship = $NavProp.attr(\"Relationship\").split(\".\");\r\n        const aAssociationSet = jQuery(oMetadata).find(\"AssociationSet[Association = '\" + aRelationship.join(\".\") + \"']\");\r\n        const sName = aRelationship.pop();\r\n        const aAssociation = jQuery(oMetadata).find(\"Association[Name = '\" + sName + \"']\");\r\n        oEntitySet.navprops[$NavProp.attr(\"Name\")] = {\r\n          \"name\": $NavProp.attr(\"Name\"),\r\n          \"from\": fnResolveNavProp($NavProp.attr(\"FromRole\"), aAssociation, aAssociationSet, true),\r\n          \"to\": fnResolveNavProp($NavProp.attr(\"ToRole\"), aAssociation, aAssociationSet, false)\r\n        };\r\n      });\r\n    });\r\n\r\n    return mEntitySets;\r\n  }\r\n\r\n  _getRootUri() {\r\n    let sUri = this._rootUri;\r\n    sUri = sUri && /([^?#]*)([?#].*)?/.exec(sUri)[1]; // remove URL parameters or anchors\r\n    return sUri;\r\n  }\r\n\r\n  _getDateTime(sString) {\r\n    if (!sString) {\r\n      return;\r\n    }\r\n\r\n    return \"datetime'\" + new Date(Number(sString.replace(\"/Date(\", \"\").replace(\")/\", \"\"))).toJSON().substring(0, 19) + \"'\";\r\n  }\r\n}"],"names":["ODataMockGenerator","metadata","options","Error","rules","_predefinedValuesConfig","predefined","_skipMockGeneration","skipMockGeneration","_distinctValues","distinctValues","_variables","variables","_numberOfEntities","numberOfEntitiesToGenerate","_rootUri","mockDataRootURI","this","substr","length","_prepareMetadata","entitySets","_findEntitySets","_oMetadata","entitySetNames","Object","keys","forEach","element","find","name","_findEntityTypes","_generateMockdata","_oMockdata","jQuery","parseXML","error","mEntitySets","oMetadata","oMockData","sRootUri","_getRootUri","each","sEntitySetName","oEntitySet","mEntitySet","_this","_generateODataMockdataForEntitySet","navprop","navprops","oNavProp","iPropRefLength","from","propRef","j","i","oEntity","to","entitySet","iIndex","oEntry","__metadata","uri","_createKeysString","type","schema","sKey","__deferred","mEntityTypes","mComplexTypes","_findComplexTypes","_this2","_generateDataFromEntitySet","oEntityType","$EntityType","attr","oProperty","$Property","properties","push","substring","lastIndexOf","oKey","sPropertyName","oComplexType","$ComplexType","aMockedEntries","_generateDataFromEntity","includes","_removeDuplicates","generatedData","keyFields","unique","repeat","insert","keyMatch","key","_generatePropertyValue","property","iIndexParameter","entityType","entity","propertyConfig","Array","isArray","Math","floor","random","indexOf","variableName","split","variable","reference","referencedValue","values","el","value","emptyProperty","_getPseudoRandomNumber","date","Date","setFullYear","setDate","setMonth","setMilliseconds","getTime","replace","c","r","toString","bind","sMask","nFlag","nShifted","String","sType","_iRandomSeed","hasOwnProperty","sKeys","oKeyValue","keysType","encodeURIComponent","_this3","_getDateTime","oPrincipals","oDependents","$EntitySet","aEntityTypeParts","exec","fnResolveNavProp","sRole","aAssociation","aAssociationSet","bFrom","sEntitySet","sMultiplicity","aPropRef","aConstraint","children","oPropRef","oPrinDep","aKeys","sKeyName","aNavProps","$NavProp","aRelationship","join","sName","pop","sUri","sString","Number","toJSON"],"mappings":"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"}